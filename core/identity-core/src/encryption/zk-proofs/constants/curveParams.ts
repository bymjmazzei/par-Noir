import { cryptoWorkerManager } from '../../cryptoWorkerManager';
import { CurveParams } from '../types/zkProofs';

// SECP256K1 curve parameters (Bitcoin/Ethereum curve)
export const SECP256K1_PARAMS: CurveParams = {
  name: 'secp256k1',
  g: {
    x: BigInt('0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798'),
    y: BigInt('0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8')
  },
  n: BigInt('0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141'),
  p: BigInt('0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F'),
  h: {
    x: BigInt('0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798'),
    y: BigInt('0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8')
  },
  keyLength: 256
};

// P-384 curve parameters (NIST P-384)
export const P384_PARAMS: CurveParams = {
  name: 'P-384',
  g: {
    x: BigInt('0xAA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7'),
    y: BigInt('0x3617DE4A96262C6F5D9E98BF9292DC29F8F41DBD289A147CE9DA3113B5F0B8C00A60B1CE1D7E819D7A431D7C90EA0E5F')
  },
  n: BigInt('0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973'),
  p: BigInt('0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF'),
  h: {
    x: BigInt('0xAA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7'),
    y: BigInt('0x3617DE4A96262C6F5D9E98BF9292DC29F8F41DBD289A147CE9DA3113B5F0B8C00A60B1CE1D7E819D7A431D7C90EA0E5F')
  },
  keyLength: 384
};

// P-521 curve parameters (NIST P-521)
export const P521_PARAMS: CurveParams = {
  name: 'P-521',
  g: {
    x: BigInt('0xC6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66'),
    y: BigInt('0x11839296A789A3BC0045C8A5FB42C7D1BD998F54449579B446817AFBD17273E662C97EE72995EF42640C550B9013FAD0761353C7086A272C24088BE94769FD16650')
  },
  n: BigInt('0x1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2DDF581A0DB248B0A77AECEC196ACCC52973'),
  p: BigInt('0x1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'),
  h: {
    x: BigInt('0xC6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66'),
    y: BigInt('0x11839296A789A3BC0045C8A5FB42C7D1BD998F54449579B446817AFBD17273E662C97EE72995EF42640C550B9013FAD0761353C7086A272C24088BE94769FD16650')
  },
  keyLength: 521
};

// Default curve parameters
export const DEFAULT_CURVE_PARAMS = SECP256K1_PARAMS;

// Curve parameter mapping
export const CURVE_PARAMS_MAP: Record<string, CurveParams> = {
  'secp256k1': SECP256K1_PARAMS,
  'P-384': P384_PARAMS,
  'P-521': P521_PARAMS
};

// Security level mappings
export const SECURITY_LEVEL_CURVE_MAP: Record<string, string> = {
  'standard': 'secp256k1',
  'military': 'P-384',
  'top-secret': 'P-521'
};

// Key length mappings
export const KEY_LENGTH_CURVE_MAP: Record<number, string> = {
  256: 'secp256k1',
  384: 'P-384',
  521: 'P-521'
};

// Quantum resistance recommendations
export const QUANTUM_RESISTANCE_CURVE_MAP: Record<string, string[]> = {
  'low': ['secp256k1'],
  'medium': ['P-384'],
  'high': ['P-521']
};
